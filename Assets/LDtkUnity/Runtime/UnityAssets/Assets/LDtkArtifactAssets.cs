using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Profiling;
using UnityEngine.Tilemaps;

namespace LDtkUnity
{
    /// <summary>
    /// Stores the autogenerated sprites for the tiles, sprites for level backgrounds, and all TileBases for the Int Grid values, and for the LDtk tiles.
    /// </summary>
    [HelpURL(LDtkHelpURL.SO_ARTIFACT_ASSETS)]
    public class LDtkArtifactAssets : ScriptableObject
    {
        internal const string PROPERTY_SPRITE_LIST = nameof(_cachedSprites);
        internal const string PROPERTY_TILE_LIST = nameof(_cachedTiles);
        internal const string PROPERTY_BACKGROUND_LIST = nameof(_cachedBackgrounds);

        [SerializeField] private List<Sprite> _cachedSprites = new List<Sprite>();
        [SerializeField] private List<TileBase> _cachedTiles = new List<TileBase>();
        [SerializeField] private List<Sprite> _cachedBackgrounds = new List<Sprite>();

        private bool _isIndexedSprites;
        private bool _isIndexedTiles;
        private bool _isIndexedBackgrounds;
        
        private readonly Dictionary<string, Sprite> _indexedSprites = new Dictionary<string, Sprite>();
        private readonly Dictionary<string, TileBase> _indexedTiles = new Dictionary<string, TileBase>();
        private readonly Dictionary<string, Sprite> _indexedBackgrounds = new Dictionary<string, Sprite>();
        
        private bool _willResetIndexedAssets;

        /// <value>
        /// Gets all of the tile sprite assets used.
        /// </value>
        public List<Sprite> SpriteArtifacts => _cachedSprites;
        
        /// <value>
        /// Gets all of the tile assets used.
        /// </value>
        public List<TileBase> TileArtifacts => _cachedTiles;
        
        /// <value>
        /// Gets all of the background sprite assets used.
        /// </value>
        public List<Sprite> BackgroundArtifacts => _cachedBackgrounds;
        
        /// <summary>
        /// Get a sprite by name from this import result.
        /// </summary>
        /// <param name="spriteName">
        /// The name of the sprite asset.
        /// </param>
        /// <returns>
        /// The sprite that was generated in this import result.
        /// </returns>
        public Sprite GetIndexedSprite(string spriteName)
        {
            IndexAssets(ref _isIndexedSprites, _cachedSprites, _indexedSprites);
            return GetIndexedItem(spriteName, _indexedSprites);
        }

        /// <summary>
        /// Get a tile by name from this import result.
        /// </summary>
        /// <param name="tileName">
        /// The name of the tile asset.
        /// </param>
        /// <returns>
        /// The tile that was generated in this import result.
        /// </returns>
        public TileBase GetIndexedTile(string tileName)
        {
            IndexAssets(ref _isIndexedTiles, _cachedTiles, _indexedTiles);
            return GetIndexedItem(tileName, _indexedTiles);
        }
        
        /// <summary>
        /// Get a background by name from this import result.
        /// </summary>
        /// <param name="backgroundName">
        /// The name of the background asset.
        /// </param>
        /// <returns>
        /// The sprite that was generated in this import result.
        /// </returns>
        public Sprite GetIndexedBackground(string backgroundName)
        {
            IndexAssets(ref _isIndexedBackgrounds, _cachedBackgrounds, _indexedBackgrounds);
            return GetIndexedItem(backgroundName, _indexedBackgrounds);
        }

        public bool HasIndexedSprite(string assetName) => HasIndexedAsset(assetName, _indexedSprites);
        public bool HasIndexedBackground(string assetName) => HasIndexedAsset(assetName, _indexedBackgrounds);
        public bool HasIndexedTile(string assetName) => HasIndexedAsset(assetName, _indexedTiles);

        private void IndexAssets<T>(ref bool isIndexed, List<T> cachedList, Dictionary<string, T> indexedDict) where T : Object
        {
            if (isIndexed)
            {
                return;
            }
            SetToReset();
            isIndexed = true;

            foreach (T asset in cachedList)
            {
                if (asset == null)
                {
                    continue;
                }
                
                if (indexedDict.ContainsKey(asset.name))
                {
                    LDtkDebug.LogError("Tried instancing an asset an extra time. this should never happen, and the cached list should all be unique");
                    continue;
                }
                
                indexedDict.Add(asset.name, asset);
            }
        }

        private void SetToReset()
        {
            if (_willResetIndexedAssets)
            {
                return;
            }

#if UNITY_EDITOR
            _willResetIndexedAssets = true;
            UnityEditor.EditorApplication.delayCall += ResetCachedAssets;
#endif
            
        }

        private void ResetCachedAssets()
        {
            _willResetIndexedAssets = false;
            _isIndexedSprites = false;
            _isIndexedTiles = false;
            _isIndexedBackgrounds = false;
            _indexedSprites.Clear();
            _indexedTiles.Clear();
            _indexedBackgrounds.Clear();
        }


        private bool HasIndexedAsset<T>(string assetName, Dictionary<string, T> indexedDictionary)
        {
            if (string.IsNullOrEmpty(assetName))
                return false;
            
            if (indexedDictionary == null)
                return false;
            
            if (indexedDictionary.Count == 0)
                return false;

            return indexedDictionary.ContainsKey(assetName);
        }
        
        private T GetIndexedItem<T>(string assetName, Dictionary<string, T> indexedDictionary) where T : Object
        {
            Profiler.BeginSample($"GetIndexedItem {typeof(T).Name}");
            if (string.IsNullOrEmpty(assetName))
            {
                LDtkDebug.LogError("GetItem Tried getting an asset without a name");
                Profiler.EndSample();
                return null;
            }
            
            if (indexedDictionary == null)
            {
                LDtkDebug.LogError($"GetItem The instanced dictionary was null when getting artifacts for {typeof(T).Name} \"{assetName}\"");
                Profiler.EndSample();
                return null;
            }
            
            if (indexedDictionary.Count == 0)
            {
                LDtkDebug.LogError($"GetItem The instanced dictionary was empty! No values of {typeof(T).Name}");
                Profiler.EndSample();
                return null;
            }

            if (indexedDictionary.ContainsKey(assetName))
            {
                Profiler.EndSample();
                return indexedDictionary[assetName];
            }
            
            //LDtkDebug.LogError($"The instanced lookup dictionary doesn't contain {typeof(T).Name} \"{assetName}\"");
            //LDtkDebug.LogError($"The instanced lookup dictionary doesn't contain {typeof(T).Name}");
            Profiler.EndSample();
            return null;
        }

        internal bool AddSprite(Sprite sprite) //it is expected that all incoming assets are unique.
        {
            if (sprite == null)
            {
                LDtkDebug.LogError("Null sprite when adding an artifact");
                return false;
            }
            _cachedSprites.Add(sprite);
            return true;
        }
        
        internal bool AddTile(TileBase tile) //it is expected that all incoming assets are unique.
        {
            if (tile == null)
            {
                LDtkDebug.LogError("Null tile when adding an artifact");
                return false;
            }
            _cachedTiles.Add(tile);
            return true;
        }

        internal bool AddBackground(Sprite bg) //it is expected that all incoming assets are unique.
        {
            if (bg == null)
            {
                LDtkDebug.LogError("Null bg when adding an artifact");
                return false;
            }
            _cachedBackgrounds.Add(bg);
            return true;
        }
        
        internal void HideSprites() => HideGroup(_cachedSprites);
        internal void HideTiles() => HideGroup(_cachedTiles);
        internal void HideBackgrounds() => HideGroup(_cachedBackgrounds); //hide the backgrounds so they arent packed in an atlas

        private void HideGroup<T>(List<T> list) where T : Object
        {
            foreach (T obj in list)
            {
                if (obj == null)
                {
                    LDtkDebug.Log("null object");
                    return;
                }
                obj.hideFlags = HideFlags.HideInHierarchy;
            }
        }
    }
}