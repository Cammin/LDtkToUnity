using System;
using System.Linq;
using UnityEngine;

namespace LDtkUnity
{
    /// <summary>
    /// This component can be used to get certain LDtk information of a layer instance. Accessible from layer GameObjects.
    /// </summary>
    [HelpURL(LDtkHelpURL.COMPONENT_LAYER)]
    [AddComponentMenu("")]
    public sealed class LDtkComponentLayer : MonoBehaviour
    {
        [field: Tooltip("This layer's level")]
        [field: SerializeField] public LDtkComponentLevel Parent { get; private set; }
        
        [field: Tooltip("The scale of this layer, which is the layer's GridSize divided by the importer's pixels per unit.\nFor example, a layer of 8 GridSize and a importer pixels per unit of 16 means that this layer's scale is 0.5.\nIn most situations, this will be 1.")]
        [field: SerializeField] public float LayerScale { get; private set; }
        
        [field: Header("Redundant Fields")]
        [field: Tooltip("Grid-based size")]
        [field: SerializeField] public Vector2Int CSize { get; private set; }
        
        [field: Tooltip("Grid size")]
        [field: SerializeField] public int GridSize { get; private set; }
        
        [field: Tooltip("Layer definition identifier")]
        [field: SerializeField] public string Identifier { get; private set; }
        
        [field: Tooltip("Layer opacity as Float [0-1]")]
        [field: SerializeField] public float Opacity { get; private set; }
        
        [field: Tooltip("Total layer pixel offset, including both instance and definition offsets.")]
        [field: SerializeField] public Vector2Int PxTotalOffset { get; private set; }
        
        [field: Tooltip("The definition UID of corresponding Tileset, if any.")]
        [field: SerializeField] public LDtkDefinitionObjectTileset TilesetDef { get; private set; }
        
        [field: Tooltip("The relative path to corresponding Tileset, if any.")]
        [field: SerializeField] public string TilesetRelPath { get; private set; }
        
        [field: Tooltip("Layer type (possible values: IntGrid, Entities, Tiles or AutoLayer)")]
        [field: SerializeField] public string Type { get; private set; }
        
        [field: Header("Fields")]
        [field: Tooltip("An array containing all tiles generated by Auto-layer rules. The array is already sorted in display order (ie. 1st tile is beneath 2nd, which is beneath 3rd etc.).\n\nNote: if multiple tiles are stacked in the same cell as the result of different rules, all tiles behind opaque ones will be discarded.")]
        [field: SerializeField] public LDtkComponentLayerTilesetTiles AutoLayerTiles { get; private set; }

        [field: Tooltip("")]
        [field: SerializeField] public LDtkComponentEntity[] EntityInstances { get; private set; }

        [field: Tooltip("")]
        [field: SerializeField] public LDtkComponentLayerTilesetTiles GridTiles { get; private set; }
        
        [field: Tooltip("Unique layer instance identifier")]
        [field: SerializeField] public LDtkIid Iid { get; private set; }
        
        [field: Tooltip("A list of all values in the IntGrid layer, stored in CSV format (Comma Separated Values).\nOrder is from left to right, and top to bottom (ie. first row from left to right, followed by second row, etc).\n`0` means \"empty cell\" and IntGrid values start at 1.\nThe array size is `__cWid` x `__cHei` cells.")]
        [field: SerializeField] public LDtkComponentLayerIntGridValues IntGrid { get; private set; }
        
        [field: Tooltip("Reference the Layer definition UID")]
        [field: SerializeField] public LDtkDefinitionObjectLayer LayerDef { get; private set; }
        
        [field: Tooltip("This layer can use another tileset by overriding the tileset UID here.")]
        [field: SerializeField] public LDtkDefinitionObjectTileset OverrideTileset { get; private set; }
        
        [field: Tooltip("Offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to the `LayerDef` optional offset, so you should probably prefer using `__pxTotalOffset` which contains the total offset value)")]
        [field: SerializeField] public Vector2Int PxOffset { get; private set; }

        [field: Tooltip("Layer instance visibility")]
        [field: SerializeField] public bool Visible { get; private set; }

        #region Internal
        
        [field: Header("Internal")]
        [field: Tooltip("An Array containing the UIDs of optional rules that were enabled in this specific layer instance.")]
        [field: SerializeField] public LDtkDefinitionObjectAutoLayerRuleGroup[] OptionalRules { get; private set; }
        
        [field: Tooltip("Random seed used for Auto-Layers rendering")]
        [field: SerializeField] public int Seed { get; private set; }

        #endregion
        
        internal void OnImport(LDtkDefinitionObjectsCache cache, LayerInstance layer, LDtkComponentLevel level, LDtkIid iid, LDtkComponentEntity[] entities, LDtkComponentLayerIntGridValues values, LDtkComponentLayerTilesetTiles tilesetTiles, float layerScale)
        {
            CSize = layer.UnityCellSize;
            GridSize = layer.GridSize;
            Identifier = layer.Identifier;
            Opacity = layer.Opacity;
            PxTotalOffset = layer.UnityPxTotalOffset;
            TilesetDef = cache.GetObject<LDtkDefinitionObjectTileset>(layer.TilesetDefUid);
            TilesetRelPath = layer.TilesetRelPath;
            Type = layer.Type;
            AutoLayerTiles = layer.IsAutoLayer ? tilesetTiles : null;
            EntityInstances = entities;
            GridTiles = layer.IsTilesLayer ? tilesetTiles : null;
            Iid = iid;
            IntGrid = values;
            LayerDef = cache.GetObject<LDtkDefinitionObjectLayer>(layer.LayerDefUid);
            OverrideTileset = cache.GetObject<LDtkDefinitionObjectTileset>(layer.OverrideTilesetUid);
            PxOffset = layer.UnityPxOffset;
            Visible = layer.Visible;
            
            //internal
            OptionalRules = layer.OptionalRules.Select(cache.GetObject<LDtkDefinitionObjectAutoLayerRuleGroup>).ToArray();
            Seed = layer.Seed;
            
            //custom
            Parent = level;
            LayerScale = layerScale;
        }

        [Obsolete("Access LayerDef instead")] public LDtkDefinitionObjectLayer Definition => LayerDef;
        [Obsolete("Access EntityInstances instead")] public LDtkComponentEntity[] Entities => EntityInstances;
        [Obsolete("Access the definition instead")] public string Doc => LayerDef.Doc;
        [Obsolete("Access the definition instead")] public TypeEnum LayerType => LayerDef.LayerDefinitionType;
    }
}